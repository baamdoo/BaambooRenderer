#ifndef _COMMON_HEADER
#define _COMMON_HEADER

#define SET_STATIC 0
#define SET_PUSH   1

#define INVALID_INDEX 0xffffffff

#define PI             3.14159265359
#define PI_MUL(num)   (PI * num)
#define PI_DIV(denom) (PI / denom)

#define EPSILON    0.00001


//-------------------------------------------------------------------------
// Primitives
//-------------------------------------------------------------------------
#ifdef _HLSL
using vec2 = float2;
using vec3 = float3;
using vec4 = float4;
using mat2 = float2x2;
using mat3 = float3x3;
using mat4 = float4x4;
#elif defined(_GLSL)
#endif

//-------------------------------------------------------------------------
// Vertex
//-------------------------------------------------------------------------
struct Vertex
{
	float posX, posY, posZ;
	float u, v;
	float normalX, normalY, normalZ;
	float tangentX, tangentY, tangentZ;
};

struct SkinnedVertex
{
    float posX, posY, posZ;
    float u, v;
    float normalX, normalY, normalZ;
    float tangentX, tangentY, tangentZ;
    uint  boneIndices;  // one index per byte
    float weight0, weight1, weight2, weight3;
};


//-------------------------------------------------------------------------
// Transforms
//-------------------------------------------------------------------------
#ifdef _HLSL
struct TransformData
{
    float4x4 mWorldToView;
    float4x4 mViewToWorld;
};

struct BoneTransformData
{
    float4x4 mBoneTransform;
};

#elif defined(_GLSL)
struct TransformData
{
	mat4 mWorldToView;
	mat4 mViewToWorld;
};

struct BoneTransformData
{
    mat4 mBoneTransform;
};

struct DrawData
{
	uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
	
    uint materialID;
	uint transformID;
	uint transformCount;

	uint boneTransformID;
	uint bSkinning;
	
	float padding0, padding1;
};
#endif

//-------------------------------------------------------------------------
// Material
//-------------------------------------------------------------------------
struct MaterialData 
{
	float tintR, tintG, tintB; 
	float metallic; 
	float roughness;
	float ior;
	float emissivePower;
	float padding0;

	uint albedoID;
	uint normalID;
	uint specularID;
	uint metallicRoughnessAoID;
	uint emissiveID;
	uint padding2, padding3, padding4;
};


//-------------------------------------------------------------------------
// Light
//-------------------------------------------------------------------------
struct DirectionalLight
{
	float dirX, dirY, dirZ;
	float illuminance_lux; // lm/m^2
	float colorR, colorG, colorB;
	float angularRadius_rad;
	float temperature_K;
	float padding0, padding1, padding2;
};

struct PointLight
{
	float posX, posY, posZ;
	float luminousFlux_lm;
	float colorR, colorG, colorB;
	float radius_m;
	float temperature_K;
	float padding0, padding1, padding2;
};

struct SpotLight
{
	float posX, posY, posZ;
	float luminousFlux_lm;
	float dirX, dirY, dirZ;
	float radius_m;
	float colorR, colorG, colorB;
	float innerConeAngle_rad;
	float outerConeAngle_rad;
	float temperature_K;
	float padding0, padding1;
};

#define MAX_DIRECTIONAL_LIGHT 4
#define MAX_POINT_LIGHT       512
#define MAX_SPOT_LIGHT        32
struct LightingData
{
	DirectionalLight directionals[MAX_DIRECTIONAL_LIGHT];
	PointLight       points[MAX_POINT_LIGHT];
	SpotLight        spots[MAX_SPOT_LIGHT];

	uint  numDirectionals;
	uint  numPoints;
	uint  numSpots;
	float ev100;

	float ambientColorR, ambientColorG, ambientColorB;
	float ambientIntensity;
};

#endif // _COMMON_HEADER