#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : enable

#include "Common.hg"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = SET_PUSH, binding = 0)          uniform sampler2D         g_AntiAliasedTexture;
layout(set = SET_PUSH, binding = 1, rgba16f) uniform writeonly image2D g_OutputImage;

// Push constants
layout(push_constant) uniform PushConstants
{
    float sharpness;
} g_Push;

void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixelCoord, imageSize(g_OutputImage))))
        return;

    vec2 texelSize = 1.0 / vec2(imageSize(g_OutputImage));
    vec2 uv        = (vec2(pixelCoord) + 0.5) * texelSize;
    
    // sample center and neighbors
    vec3 center = texture(g_AntiAliasedTexture, uv).rgb;
    vec3 top    = texture(g_AntiAliasedTexture, uv + vec2(0.0, -texelSize.y)).rgb;
    vec3 bottom = texture(g_AntiAliasedTexture, uv + vec2(0.0,  texelSize.y)).rgb;
    vec3 left   = texture(g_AntiAliasedTexture, uv + vec2(-texelSize.x, 0.0)).rgb;
    vec3 right  = texture(g_AntiAliasedTexture, uv + vec2( texelSize.x, 0.0)).rgb;
    
    // compute sharpening
    vec3 sharpened = center + g_Push.sharpness * (4.0 * center - top - bottom - left - right);
    
    vec3 minColor = min(min(min(min(center, top), bottom), left), right);
    vec3 maxColor = max(max(max(max(center, top), bottom), left), right);
    sharpened     = clamp(sharpened, minColor, maxColor);
    
    imageStore(g_OutputImage, pixelCoord, vec4(sharpened, 1.0));
}