#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : require
#include "../Common.bsh"
#include "HelperFunctions.hg"

layout (set = SET_PUSH, binding = 0) uniform sampler2D g_SceneTexture;
layout (set = SET_PUSH, binding = 1) uniform sampler2D g_VelocityTexture; // MotionVectors.xy + Roughness.z + Metallic.w
layout (set = SET_PUSH, binding = 2) uniform sampler2D g_HistoryTexture;

layout (set = SET_PUSH, binding = 3, rgba16f) uniform writeonly image2D g_OutputImage;

layout(push_constant) uniform PushConstants
{
    float blendFactor;
    uint  bFirstFrame;
} g_Push;


layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main() 
{
    ivec2 imgSize   = textureSize(g_SceneTexture, 0);
    ivec2 pixCoords = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixCoords, imgSize)))
        return;

    vec2  uv        = (vec2(pixCoords) + 0.5) / vec2(imgSize);

    vec2 velocity      = texture(g_VelocityTexture, uv).xy;
    vec2 historyUV     = uv - velocity;
    bool bValidHistory = all(greaterThanEqual(historyUV, vec2(0.0))) && all(lessThanEqual(historyUV, vec2(1.0)));

    vec3 currentColor = texture(g_SceneTexture, uv).rgb;
    vec3 historyColor = vec3(0.0);
    if (bValidHistory && g_Push.bFirstFrame == 0)
    {
        historyColor = TextureCatmullRom(g_HistoryTexture, historyUV, imgSize).rgb;
    }
    else
    {
        historyColor = currentColor;
    }

    // neighborhood clamping in YCoCg space
    vec3 historyYCoCg = RGB2YCoCg(historyColor);

    vec3 m1 = vec3(0.0);
    vec3 m2 = vec3(0.0);
    vec3 neighborMin = vec3(1e10);
    vec3 neighborMax = vec3(-1e10);
    
    // sample a 3x3 neighborhood around the current pixel
    for (float x = -1.0; x <= 1.0; x += 1.0) 
    {
        for (float y = -1.0; y <= 1.0; y += 1.0) 
        {
            vec2 sampleUV      = uv + vec2(x, y) / vec2(imgSize);
            vec3 neighborColor = texture(g_SceneTexture, sampleUV).rgb;
            vec3 neighborYCoCg = RGB2YCoCg(neighborColor);

            m1 += neighborYCoCg;
            m2 += neighborYCoCg * neighborYCoCg;
            neighborMin = min(neighborMin, neighborYCoCg);
            neighborMax = max(neighborMax, neighborYCoCg);
        }
    }

    // Variance Clipping : https://developer.download.nvidia.com/gameworks/events/GDC2016/msalvi_temporal_supersampling.pdf
    const float gamma = 1.0; // tightness of the clipping
    vec3 mu    = m1 / 9.0;
    vec3 sigma = sqrt(abs(m2 / 9.0 - mu * mu));
    vec3 minc  = mu - gamma * sigma;
    vec3 maxc  = mu + gamma * sigma;

    vec3 clampedHistoryYCoCg = ClipAABB(minc, maxc, historyYCoCg);
    vec3 clampedHistory      = YCoCg2RGB(clampedHistoryYCoCg);

    // velocity-based weight adjustment
    float velocityMagnitude = length(velocity * vec2(imgSize));
    float velocityWeight    = 1.0 / (1.0 + velocityMagnitude * 0.1);

    float blendAlpha = bValidHistory ? g_Push.blendFactor * velocityWeight : 1.0;

    vec3 finalColor = mix(clampedHistory, currentColor, blendAlpha);

    imageStore(g_OutputImage, pixCoords, vec4(finalColor, 1.0));
}