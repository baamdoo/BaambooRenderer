#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : require

#define _CAMERA
#include "Common.hg"
#define _ATMOSPHERE
#include "AtmosphereCommon.hg"

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout(set = SET_PUSH, binding = 2) uniform sampler2D g_TransmittanceLUT;
layout(set = SET_PUSH, binding = 3) uniform sampler2D g_MultiScatteringLUT;
layout(set = SET_PUSH, binding = 4, rgba16f) uniform writeonly image3D g_AerialPerspectiveLUT;

vec4 ComputeAerialPerspective(vec3 rayOrigin, vec3 rayDir, float maxDistance, uint rayMarchSteps) 
{
    vec2 atmosphereIntersection = RaySphereIntersection(rayOrigin, rayDir, PLANET_CENTER, g_Atmosphere.atmosphereRadius_km);
    if (atmosphereIntersection.y < 0.0)
        return vec4(0.0);

    float rayStart  = max(0.0, atmosphereIntersection.x);
    float rayLength = min(maxDistance, atmosphereIntersection.y) - rayStart;
    if (rayLength <= 0.0)
        return vec4(0.0);

    // light illuminance
    vec3 lightColor = vec3(g_Atmosphere.light.colorR, g_Atmosphere.light.colorG, g_Atmosphere.light.colorB);
    if (g_Atmosphere.light.temperature_K > 0.0)
        lightColor *= ColorTemperatureToRGB(g_Atmosphere.light.temperature_K);

    vec3 E = g_Atmosphere.light.illuminance_lux * lightColor;

    // phase functions
    float cosTheta      = dot(rayDir, vec3(-g_Atmosphere.light.dirX, -g_Atmosphere.light.dirY, -g_Atmosphere.light.dirZ));
    float phaseRayleigh = RayleighPhase(cosTheta);
    float phaseMie      = MiePhase(cosTheta, g_Atmosphere.miePhaseG);

    float stepSize = rayLength / float(rayMarchSteps);

    vec3 L          = vec3(0.0); // In-scattered luminance
    vec3 throughput = vec3(1.0); // Transmittance
    for (uint i = 0u; i < rayMarchSteps; ++i) 
    {
        float t   = (float(i) + 0.5) * stepSize;
        vec3  pos = rayOrigin + t * rayDir;
        
        // skip if below ground
        float sampleHeight = length(pos);
        if (sampleHeight < g_Atmosphere.planetRadius_km) 
            break;
        
        // skip if above atmosphere
        if (sampleHeight > g_Atmosphere.atmosphereRadius_km)
            continue;

        float sampleAltitude = sampleHeight - g_Atmosphere.planetRadius_km;
        
        // extinction(out-scattering) at sample point
        float rayleighDensity = GetDensityAtHeight(sampleAltitude, g_Atmosphere.rayleighDensityH_km);
        float mieDensity      = GetDensityAtHeight(sampleAltitude, g_Atmosphere.mieDensityH_km);
        float ozoneDensity    = GetDensityOzoneAtHeight(sampleAltitude);

        vec3  rayleighScattering = g_Atmosphere.rayleighScattering * rayleighDensity;
        float mieScattering      = g_Atmosphere.mieScattering * mieDensity;
        float mieAbsorption      = g_Atmosphere.mieAbsorption * mieDensity;
        vec3  ozoneAbsorption    = g_Atmosphere.ozoneAbsorption * ozoneDensity;

        vec3 scattering        = rayleighScattering + vec3(mieScattering);
        vec3 extinction        = rayleighScattering + vec3(mieScattering + mieAbsorption) + ozoneAbsorption;
        vec3 phasedScattering  = phaseRayleigh * rayleighScattering + phaseMie * mieScattering; // σs(x) * p(v,l)
        vec3 stepTransmittance = exp(-extinction * stepSize);                                   // (2) T(xa,xb) = exp(−Integral(xa~xb, σ(x)dx))

        // transmittance from sample point to sun
        float sampleTheta        = dot(normalize(pos), vec3(-g_Atmosphere.light.dirX, -g_Atmosphere.light.dirY, -g_Atmosphere.light.dirZ));
        vec3  transmittanceToSun = SampleTransmittanceLUT(g_TransmittanceLUT, sampleHeight, sampleTheta, g_Atmosphere.planetRadius_km, g_Atmosphere.atmosphereRadius_km);

        // multi-scattering
        vec2 msUV = clamp(
                        vec2(sampleTheta * 0.5 + 0.5, inverseLerp(sampleHeight, g_Atmosphere.planetRadius_km, g_Atmosphere.atmosphereRadius_km)),
                    0.0, 1.0);
        vec3 multiScattering = texture(g_MultiScatteringLUT, msUV).rgb;

        // planet shadow
        vec2  planetIntersection = RaySphereIntersection(pos, vec3(-g_Atmosphere.light.dirX, -g_Atmosphere.light.dirY, -g_Atmosphere.light.dirZ), PLANET_CENTER, g_Atmosphere.planetRadius_km);
        float planetShadow       = planetIntersection.x < 0.0 ? 1.0 : 0.0;

        {
            // (4) S(x,li) = Vis(l_i) * T(x,x+t*li)
            // vec3 S = planetShadow * transmittanceToSun;
            // (3) Lscat(c,x,v) = σs(x) * (T(c,x) * S(x,l) * p(v,l) + Ψms) * E * dt
            // L     += (throughput * S * phasedScattering + multiScattering * scattering) * E * stepSize;
            
            // Analytical integration as proposed in slide 28 of http://www.frostbite.com/2015/08/physically-based-unified-volumetric-rendering-in-frostbite/
            vec3 S    = (planetShadow * transmittanceToSun * phasedScattering + multiScattering * scattering) * E;
            vec3 Sint = (S - S * stepTransmittance) / extinction;
            L        += throughput * Sint;
        }
        throughput *= stepTransmittance;
    }

    // xyz: (3) Lscat(c,x,v), w: (1) T(c,p) (Lo will be evaluated later stage)
    return vec4(L, dot(throughput, vec3(1.0 / 3.0)));
}

void main() 
{
    ivec3 texSize = imageSize(g_AerialPerspectiveLUT);
    vec3  uvw     = vec3(gl_GlobalInvocationID.xyz + 0.5) / vec3(texSize);

    if (gl_GlobalInvocationID.x >= texSize.x || gl_GlobalInvocationID.y >= texSize.y || gl_GlobalInvocationID.z >= texSize.z)
        return;
    
    vec3 cameraPos =
        vec3(g_Camera.posWORLD.x, max(g_Camera.posWORLD.y, MIN_VIEW_HEIGHT_ABOVE_GROUND), g_Camera.posWORLD.z);
    vec3 cameraPosAbovePlanet =
        cameraPos * DISTANCE_SCALE + vec3(0.0, g_Atmosphere.planetRadius_km, 0.0);

    float slice = uvw.z;
    slice *= slice;
    slice *= float(texSize.z);

    float maxDistance = AP_KM_PER_SLICE * slice;
    vec3  rayDir      = normalize(ReconstructWorldPos(uvw.xy, 0.5, g_Camera.mViewProjInv));
    vec3  rayOrigin   = cameraPosAbovePlanet;
    vec3  posInFroxel = cameraPosAbovePlanet + rayDir * maxDistance;
    
    if (length(posInFroxel) < g_Atmosphere.planetRadius_km + EPSILON)
    {
        posInFroxel = normalize(posInFroxel) * (g_Atmosphere.planetRadius_km + EPSILON);
        rayDir      = normalize(posInFroxel - cameraPosAbovePlanet);
        maxDistance = length(posInFroxel - cameraPosAbovePlanet);
    }

    uint rayMarchSteps = max(1, uint(gl_GlobalInvocationID.z + 1) * 2);
    vec4 result        = ComputeAerialPerspective(rayOrigin, rayDir, maxDistance, rayMarchSteps);
    
    imageStore(g_AerialPerspectiveLUT, ivec3(gl_GlobalInvocationID.xyz), result);
}