#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : enable

#include "Common.hg"
#include "HelperFunctions.hg"
#include "Noise.hg"

layout(set = SET_PUSH, binding = 0, rgba16f) writeonly uniform image3D g_DetailNoise;

layout(push_constant) uniform PushConstants
{
    // r-channel
    float rWeight;
    float rFrequency;
    uint  rOctaves;
    float rPersistence;
    float rLacunarity;

    // g-channel
    float gWeight;
    float gFrequency;
    uint  gOctaves;
    float gPersistence;
    float gLacunarity;

    // b-channel
    float bWeight;
    float bFrequency;
    uint  bOctaves;
    float bPersistence;
    float bLacunarity;
} g_Push;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main() 
{
    ivec3 imgSize   = imageSize(g_DetailNoise);
    ivec3 pixCoords = ivec3(gl_GlobalInvocationID.xyz);
    if (any(greaterThanEqual(pixCoords, imgSize)))
        return;

    vec3  uvw       = vec3(pixCoords + 0.5) / vec3(imgSize);
    
    float r = worleyFBM(uvw, 8.0);
    float g = worleyFBM(uvw, 16.0);
    float b = worleyFBM(uvw, 32.0);
	float a = max(0.0, 1.0 - (r * g_Push.rWeight + g * g_Push.gWeight + b * g_Push.bWeight) / 1.75);

    vec4 value = vec4(r, g, b, a);

    imageStore(g_DetailNoise, pixCoords, value);
}