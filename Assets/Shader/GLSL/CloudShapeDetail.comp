#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : enable

#include "Common.hg"
#include "HelperFunctions.hg"
#include "Noise.hg"

layout(set = SET_PUSH, binding = 0, rgba16f) writeonly uniform image3D g_DetailNoise;

layout(push_constant) uniform PushConstants
{
    float fWorley;
    float lacunarityWorley;

    // misc
    float time_s;
} g_Push;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main() 
{
    ivec3 imgSize   = imageSize(g_DetailNoise);
    ivec3 pixCoords = ivec3(gl_GlobalInvocationID.xyz);
    if (any(greaterThanEqual(pixCoords, imgSize)))
        return;

    vec3  uvw       = vec3(pixCoords + 0.5) / vec3(imgSize);
          uvw.xy   += g_Push.time_s * 0.02;
    
    float worley0 = (1.0f - worleyNoise3D(uvw, g_Push.fWorley));
	float worley1 = (1.0f - worleyNoise3D(uvw, g_Push.fWorley * g_Push.lacunarityWorley));
	float worley2 = (1.0f - worleyNoise3D(uvw, g_Push.fWorley * g_Push.lacunarityWorley * g_Push.lacunarityWorley));
	float worley3 = (1.0f - worleyNoise3D(uvw, g_Push.fWorley * g_Push.lacunarityWorley * g_Push.lacunarityWorley * g_Push.lacunarityWorley));

    float worleyFBM0 = worley0 * 0.625 + worley1 * 0.25 + worley2 * 0.125;
	float worleyFBM1 = worley1 * 0.625 + worley2 * 0.25 + worley3 * 0.125;
	float worleyFBM2 = worley2 * 0.750 + worley3 * 0.25;

    vec4 value = vec4(worleyFBM0, worleyFBM1, worleyFBM2, 1.0);

    imageStore(g_DetailNoise, pixCoords, value);
}