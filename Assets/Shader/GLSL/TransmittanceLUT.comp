#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : require

#define _ATMOSPHERE
#include "AtmosphereCommon.hg"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = SET_PUSH, binding = 2, r11f_g11f_b10f) uniform writeonly image2D g_TransmittanceLUT;

void GenerateTransmittanceCoordsFromUV(vec2 uv, float bottomRadius, float topRadius, out float cosZenithAngle, out float viewHeight)
{
    // Put more frequencies near the horizon
    float H    = safeSqrt(topRadius * topRadius - bottomRadius * bottomRadius);
    float rho  = H * uv.y;
    viewHeight = safeSqrt(rho * rho + bottomRadius * bottomRadius);

    float d_min = topRadius - viewHeight;
    float d_max = rho + H;
    float d     = mix(d_min, d_max, uv.x);

    cosZenithAngle = d == 0.0 ? 
        1.0 : (H * H - rho * rho - d * d) / (2.0 * viewHeight * d);
    cosZenithAngle = clamp(cosZenithAngle, -1.0, 1.0);
}

vec3 ComputeExtinction(vec3 rayOrigin, vec3 rayDir, float rayLength, int numSamples) 
{
    float stepSize   = rayLength / float(numSamples);
    vec3  extinction = vec3(0.0);
    
    for (int i = 0; i < numSamples; ++i) 
    {
        float t   = (float(i) + 0.5) * stepSize;
        vec3  pos = rayOrigin + t * rayDir;

        float altitude = GetAltitude(pos);
        
        float rayleighDensity = GetDensityAtHeight(altitude, g_Atmosphere.rayleighDensityH_km);
        extinction += g_Atmosphere.rayleighScattering * rayleighDensity * stepSize;
        
        float mieDensity = GetDensityAtHeight(altitude, g_Atmosphere.mieDensityH_km);
        extinction += (g_Atmosphere.mieScattering + g_Atmosphere.mieAbsorption) * mieDensity * stepSize;
        
        float ozoneDensity = GetDensityOzoneAtHeight(altitude);
        extinction += g_Atmosphere.ozoneAbsorption * ozoneDensity * stepSize;
    }
    
    return extinction;
}

void main() 
{
    ivec2 texSize = imageSize(g_TransmittanceLUT);
    vec2  uv      = vec2(gl_GlobalInvocationID.xy + 0.5) / vec2(texSize);

    if (gl_GlobalInvocationID.x >= texSize.x || gl_GlobalInvocationID.y >= texSize.y)
        return;
    
    float cosZenithAngle, viewHeight;
    GenerateTransmittanceCoordsFromUV(
        uv, g_Atmosphere.planetRadius_km, g_Atmosphere.atmosphereRadius_km, cosZenithAngle, viewHeight
    );
    
    vec3 rayOrigin = vec3(0.0, viewHeight, 0.0);
    vec3 rayDir    = vec3(safeSqrt(1.0 - cosZenithAngle * cosZenithAngle), cosZenithAngle, 0.0);
    
    vec2 groundIntersection     = RaySphereIntersection(rayOrigin, rayDir, PLANET_CENTER, g_Atmosphere.planetRadius_km);
    vec2 atmosphereIntersection = RaySphereIntersection(rayOrigin, rayDir, PLANET_CENTER, g_Atmosphere.atmosphereRadius_km);
    
    float rayLength;
    if (groundIntersection.x > 0.0) 
    {
        // ray hits ground
        rayLength = groundIntersection.x;
    } else 
    {
        // ray goes through atmosphere
        rayLength = atmosphereIntersection.y;
    }
    
    if (rayLength <= 0.0) 
    {
        imageStore(g_TransmittanceLUT, ivec2(uv), vec4(0.0, 0.0, 0.0, 1.0));
        return;
    }
    
    const int numSamples = 64;
    vec3 extinction    = ComputeExtinction(rayOrigin, rayDir, rayLength, numSamples);
    vec3 transmittance = exp(-extinction); // (2) T(xa,xb) = exp(−Integral(xa~xb, σ(x)dx))
    
    imageStore(g_TransmittanceLUT, ivec2(gl_GlobalInvocationID.xy), vec4(transmittance, 1.0));
}